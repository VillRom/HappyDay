package ru.romanchev.happyday.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.romanchev.happyday.config.BotConfig;
import ru.romanchev.happyday.dto.JokeDto;
import ru.romanchev.happyday.dto.MessageDto;
import ru.romanchev.happyday.dto.UserDto;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Component
@Slf4j
public class TelegramBot extends TelegramLongPollingBot {

    private static final String TEXT_HELP = "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è \uD83D\uDC4D.\n" +
            "–ë–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Ñ—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É  - /happy –±–æ—Ç—É.\n" +
            "–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –æ—Ç –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ - /joke. –°–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ –º–µ–Ω—é, " +
            "—Ç–∞–º –ª–µ–∂–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –°–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏—Ö –±—É–¥–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –±–æ–ª—å—à–µ. \uD83D\uDE09\n\n–ë–æ—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, " +
            "–ø–æ—ç—Ç–æ–º—É –±—É–¥—É —Ä–∞–¥ –≤–∞—à–µ–º—É —Ñ–∏–¥–±—ç–∫—É –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º. –ò—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É happy_day_bot@bk.ru";

    private static final String GET_HAPPY = "GET_HAPPY";

    private static final String GET_JOKE = "GET_JOKE";

    private final BotConfig config;

    private final UserService userService;

    private final MessageService messageService;

    private final PhraseService phraseService;

    private final JokeService jokeService;

    public TelegramBot(BotConfig config, UserService userService,
                       MessageService messageService, PhraseService phraseService, JokeService jokeService) {
        this.config = config;
        this.userService = userService;
        this.messageService = messageService;
        this.phraseService = phraseService;
        this.jokeService = jokeService;
        List<BotCommand> botCommandList = new ArrayList<>();
        botCommandList.add(new BotCommand("/start", "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"));
        botCommandList.add(new BotCommand("/happy", "–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ñ—Ä–∞–∑—É"));
        botCommandList.add(new BotCommand("/info", "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞"));
        botCommandList.add(new BotCommand("/joke", "–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫—Ç–æ–¥"));
        try{
            this.execute(new SetMyCommands(botCommandList, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("Error setting bot's command list" + e.getMessage());
            throw new RuntimeException(e);
        }
    }

    @Override
    public String getBotToken() {
        return config.getBotKey();
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String requestText = update.getMessage().getText();
            String nameUser = update.getMessage().getChat().getFirstName();
            String lastName = update.getMessage().getChat().getLastName();
            String nikName = update.getMessage().getChat().getUserName();
            if (requestText.startsWith("/sendAllTheUsers") && chatId.equals(config.getAdminId())) {
                var textToSend = requestText.substring(requestText.indexOf(" "));
                List<UserDto> users = userService.getAllUsersWithoutAdmin(chatId);
                for (UserDto user : users) {
                    sendMessageWithKeyboard(twoButtonHappyAndJokeOnKeyboard(user.getId(), textToSend));
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - '{}'", user.getFirstName(), textToSend);
                }
                sendMessage(config.getAdminId(), "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.");
            } else if (requestText.startsWith("/update") && chatId.equals(config.getAdminId())) {
                sendMessage(chatId, updatePhrasesDbFromFile());
            } else if (requestText.startsWith("/newJoke") && chatId.equals(config.getAdminId())) {
                JokeDto dto = new JokeDto();
                dto.setTextJoke(requestText.substring(requestText.indexOf(" ")));
                sendMessage(chatId, jokeService.addJoke(dto));
            } else {
                switch (requestText) {
                    case "/start":
                        log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /start –æ—Ç {}", nameUser);
                        saveUser(nameUser, lastName, nikName, chatId);
                        saveMessage(requestText, startCommand(chatId, nameUser), chatId, update.getMessage().getDate());
                        break;
                    case "/happy":
                        log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /happy –æ—Ç {}", nameUser);
                        happyCommand(requestText, update.getMessage().getDate(), chatId);
                        break;
                    case "/info":
                        log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /info –æ—Ç {}", nameUser);
                        sendMessage(chatId, TEXT_HELP);
                        break;
                    case "/joke":
                        log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /joke –æ—Ç {}", nameUser);
                        jokeCommand(requestText, update.getMessage().getDate(), chatId);
                        break;
                    default:
                        log.info("–û—Ç {} –ø—Ä–∏—à–ª–æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n{}", nameUser, requestText);
                        sendMessage(chatId, "–ù–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ –Ω–µ—á–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å, " +
                                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n/happy");
                }
            }
        } else if (update.hasMessage() && update.getMessage().hasContact() && update.getMessage().getFrom()
                .getId().equals(config.getAdminId())) {
            saveUser(update.getMessage().getContact().getFirstName(), update.getMessage().getContact().getLastName(),
                    update.getMessage().getContact().getFirstName(), update.getMessage().getContact().getUserId());
            sendMessage(config.getAdminId(), "–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Long chatId = update.getCallbackQuery().getMessage().getChatId();
            if (callbackData.equals(GET_HAPPY)) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º  - {} –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ - '–ï—â—ë' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º /happy", update.getCallbackQuery()
                        .getFrom().getFirstName());
                happyCommand("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ - –ï—â—ë \uD83D\uDC47", update.getCallbackQuery().getMessage().getDate(),
                        chatId);
            }
            if (callbackData.equals(GET_JOKE)) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º  - {} –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ - '–ï—â—ë' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º /joke", update.getCallbackQuery()
                        .getFrom().getFirstName());
                jokeCommand("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ - –ï—â—ë \uD83D\uDC47", update.getCallbackQuery().getMessage().getDate(),
                        chatId);
            }
        } else {
            Long chatId = update.getMessage().getChatId();
            sendMessage(chatId, "–ù–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ –Ω–µ—á–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å, " +
                    "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n/happy");
        }
    }

    private String updatePhrasesDbFromFile() {
        return phraseService.updatePhrases();
    }

    private String startCommand(Long chatId, String name) {
        String response;
        if (messageService.isContainsPhraseStart(chatId, "/start")) {
            response = name + ", —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! –°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π —Å–≤–æ—é —Ñ—Ä–∞–∑—É –¥–Ω—è - /happy\n–ò–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç - /joke";
        } else {
            response = "–ü—Ä–∏–≤–µ—Ç " + name + ", —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!\n–°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π —Å–≤–æ—é —Ñ—Ä–∞–∑—É –¥–Ω—è - /happy\n" +
                    "–ò–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç - /joke";
        }
        sendMessage(chatId, response);
        return response;
    }

    private void happyCommand(String textIn, Integer date, Long chatId) {
        String response = "–î–∞—Ä—é —Ç–µ–±–µ —ç—Ç—É —Ñ—Ä–∞–∑—É:\n" + "\uD83D\uDC4C" + getHappyPhrases() +
                "üëå \n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –Ω–∞–∂–∏–º–∞–π –µ—â—ë - /happy\n–ò–ª–∏ –∫–ª–∏–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \uD83D\uDC47";
        try {
            execute(oneButtonOnKeyboard(chatId, response, GET_HAPPY));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        saveMessage(textIn, response, chatId, date);
    }

    private void jokeCommand(String textIn, Integer date, Long chatId) {
        String response;
        String textJoke = getJoke();
        if (textJoke != null) {
            response = "–ü–æ–ª—É—á–∞–π –∞–Ω–µ–∫–¥–æ—Ç:\n" /*"\uD83D\uDC4C"*/ + textJoke +
                    "\n --------\n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –Ω–∞–∂–∏–º–∞–π –µ—â—ë - /joke\n–ò–ª–∏ –∫–ª–∏–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \uD83D\uDC47";
        }
        else response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –∏–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ –ø–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é.\n" +
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π - /happy";
        try {
            execute(oneButtonOnKeyboard(chatId, response, GET_JOKE));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        saveMessage(textIn, response, chatId, date);
    }

    private SendMessage oneButtonOnKeyboard(Long chatId, String text, String callbackData) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(text);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();
        var button = new InlineKeyboardButton();
        button.setText("–ï—â—ë \uD83E\uDD17");
        button.setCallbackData(callbackData);

        rowInLine.add(button);
        rowsInline.add(rowInLine);
        keyboardMarkup.setKeyboard(rowsInline);
        sendMessage.setReplyMarkup(keyboardMarkup);
        return sendMessage;
    }

    private SendMessage twoButtonHappyAndJokeOnKeyboard(Long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(text);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();
        var buttonHappy = new InlineKeyboardButton();
        buttonHappy.setText("–§—Ä–∞–∑–∞");
        buttonHappy.setCallbackData(GET_HAPPY);
        var buttonJoke = new InlineKeyboardButton();
        buttonJoke.setText("–ê–Ω–µ–∫–¥–æ—Ç");
        buttonJoke.setCallbackData(GET_JOKE);

        rowInLine.add(buttonHappy);
        rowInLine.add(buttonJoke);
        rowsInline.add(rowInLine);
        keyboardMarkup.setKeyboard(rowsInline);
        sendMessage.setReplyMarkup(keyboardMarkup);
        return sendMessage;
    }

    private void sendMessage(Long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void sendMessageWithKeyboard(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private String getHappyPhrases() {
        return phraseService.getRandomPhrase().getTextPhrase();
    }

    private String getJoke() {
        return jokeService.getRandomJoke().getTextJoke();
    }

    private void saveUser(String firstName, String lastName, String nikName, Long userId) {
        UserDto dto = new UserDto();
        dto.setId(userId);
        dto.setFirstName(firstName);
        dto.setLastName(lastName);
        dto.setNikName(nikName);
        userService.addUser(dto);
    }

    private void saveMessage(String textIn, String textTo, Long userId, Integer date) {
        MessageDto dto = new MessageDto();
        dto.setDate(new Date(date.longValue() * 1000));
        dto.setUserId(userId);
        dto.setTextIn(textIn);
        dto.setTextTo(textTo);
        messageService.addMessageFromUser(dto);
    }
}
