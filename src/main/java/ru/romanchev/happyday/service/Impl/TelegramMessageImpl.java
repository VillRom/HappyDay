package ru.romanchev.happyday.service.Impl;

import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.romanchev.happyday.dto.MessageDto;
import ru.romanchev.happyday.dto.UserDto;
import ru.romanchev.happyday.model.CallBackDates;
import ru.romanchev.happyday.service.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@RequiredArgsConstructor
@Data
@Slf4j
public class TelegramMessageImpl implements TelegramMessage {

    private Message message;

    private final PhraseService phraseService;

    private final MessageService messageService;

    private final JokeService jokeService;

    @Value(value = "${admin.bot.id}")
    private Long adminId;

    private static final String TEXT_HELP = "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è \uD83D\uDC4D.\n" +
            "–ë–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Ñ—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É  - /happy –±–æ—Ç—É.\n" +
            "–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –æ—Ç –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ - /joke. –°–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ –º–µ–Ω—é, " +
            "—Ç–∞–º –ª–µ–∂–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –°–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏—Ö –±—É–¥–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –±–æ–ª—å—à–µ. \uD83D\uDE09\n\n–ë–æ—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, " +
            "–ø–æ—ç—Ç–æ–º—É –±—É–¥—É —Ä–∞–¥ –≤–∞—à–µ–º—É —Ñ–∏–¥–±—ç–∫—É –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º. –ò—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É happy_day_bot@bk.ru";

    private final UserService userService;

    @Override
    public SendMessage getHappy() {
        log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /happy –æ—Ç {}", message.getChat().getFirstName());
        String response = "–î–∞—Ä—é —Ç–µ–±–µ —ç—Ç—É —Ñ—Ä–∞–∑—É:\n" + "\uD83D\uDC4C" + getHappyPhrases() +
                "üëå \n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –Ω–∞–∂–∏–º–∞–π –µ—â—ë - /happy\n–ò–ª–∏ –∫–ª–∏–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \uD83D\uDC47";
        saveMessage(message.getText(), response, message.getChatId(), message.getDate());
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(message.getChatId()));
        sendMessage.setText(response);
        sendMessage.setReplyMarkup(oneButtonOnKeyboard(String.valueOf(CallBackDates.GET_HAPPY)));
        return sendMessage;
    }

    @Override
    public SendMessage getJoke() {
        log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /joke –æ—Ç {}", message.getChat().getFirstName());
        String response;
        String textJoke = getRandomJoke();
        if (textJoke != null)
            response = "–ü–æ–ª—É—á–∞–π –∞–Ω–µ–∫–¥–æ—Ç:\n" + textJoke + "\n --------\n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –Ω–∞–∂–∏–º–∞–π –µ—â—ë" +
                    " - /joke\n–ò–ª–∏ –∫–ª–∏–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \uD83D\uDC47";
        else response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –∏–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ –ø–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é.\n" +
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π - /happy";
        saveMessage(message.getText(), response, message.getChatId(), message.getDate());
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(message.getChatId()));
        sendMessage.setText(response);
        if (response.startsWith("–ü–æ–ª—É—á–∞–π")) sendMessage.setReplyMarkup(oneButtonOnKeyboard(String
                .valueOf(CallBackDates.GET_JOKE)));
        return sendMessage;
    }

    @Override
    public SendMessage responseOnBotCommand() {
        SendMessage sendMessage;
        switch (message.getText()) {
            case "/start":
                log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /start –æ—Ç {}", message.getChat().getFirstName());
                saveUser(message.getChat().getFirstName(), message.getChat().getLastName(),
                        message.getChat().getUserName(), message.getChatId());
                sendMessage = getStart();
                break;
            case "/happy":
                sendMessage = getHappy();
                break;
            case "/info":
                sendMessage = getInfo();
                break;
            case "/joke":
                sendMessage = getJoke();
                break;
            default:
                log.info("–û—Ç {} –ø—Ä–∏—à–ª–æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n{}",
                        message.getChat().getFirstName(), message.getText());
                sendMessage = defaultMessageTo();
        }
        return sendMessage;
    }

    @Override
    public SendMessage getStart() {
        String response;
        if (messageService.isContainsPhraseStart(message.getChatId(), "/start")) {
            response = message.getChat().getFirstName() + ", —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! –°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π —Å–≤–æ—é —Ñ—Ä–∞–∑—É –¥–Ω—è " +
                    "- /happy\n–ò–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç - /joke";
        } else {
            response = "–ü—Ä–∏–≤–µ—Ç " + message.getChat().getFirstName() + ", —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!\n–°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π —Å–≤–æ—é —Ñ—Ä–∞–∑—É " +
                    "–¥–Ω—è - /happy\n–ò–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç - /joke";
        }
        saveMessage(message.getText(), response, message.getChatId(), message.getDate());
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(message.getChatId()));
        sendMessage.setText(response);
        return sendMessage;
    }

    @Override
    public SendMessage getInfo() {
        log.info("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /info –æ—Ç {}", message.getChat().getFirstName());
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(message.getChatId()));
        sendMessage.setText(TEXT_HELP);
        return sendMessage;
    }

    private SendMessage defaultMessageTo() {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(message.getChatId()));
        sendMessage.setText("–ù–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ –Ω–µ—á–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å, " +
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n/happy\n/joke");
        return sendMessage;
    }

    private String getRandomJoke() {
        return jokeService.getRandomJoke().getTextJoke();
    }

    private String getHappyPhrases() {
        return phraseService.getRandomPhrase().getTextPhrase();
    }

    private void saveMessage(String textIn, String textTo, Long userId, Integer date) {
        MessageDto dto = new MessageDto();
        dto.setDate(new Date(date.longValue() * 1000));
        dto.setUserId(userId);
        dto.setTextIn(textIn);
        dto.setTextTo(textTo);
        messageService.addMessageFromUser(dto);
    }

    private InlineKeyboardMarkup oneButtonOnKeyboard(String callbackData) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();
        var button = new InlineKeyboardButton();
        button.setText("–ï—â—ë \uD83E\uDD17");
        button.setCallbackData(callbackData);

        rowInLine.add(button);
        rowsInline.add(rowInLine);
        keyboardMarkup.setKeyboard(rowsInline);
        return keyboardMarkup;
    }

    private void saveUser(String firstName, String lastName, String nikName, Long userId) {
        UserDto dto = new UserDto();
        dto.setId(userId);
        dto.setFirstName(firstName);
        dto.setLastName(lastName);
        dto.setNikName(nikName);
        userService.addUser(dto);
    }
}
